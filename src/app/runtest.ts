

/// <reference path="../../typings/tsd.d.ts" />
"use strict";

import fs = require("fs");
import path = require("path");

var argv = { polyfills:[], verbose:false, display:false, _:[], summary:false, nopolyfills:false };

function v(...msg:any[]) {
  if (argv.verbose) {
    console.log.apply(null, msg);
  }
}

function fail(code:number = -1, ...msg:string[]) {
  if (msg.length != 0) console.error.apply(null, msg);
  process.exit(code);
}

function showHelp() {
  console.log("runtest.js - a script to run a test set in distinct node process");
  console.log("  the JSON test report is written on output");
  console.log(" NOTE : this script is intended for internal escheck use")
  console.log();
  console.log("    node runtest.js <testFile>");
  console.log("      <testfile> : a test set generated by escheck");
  
  console.log("    -p, --polyfill <file> : a module to require before running the script");
  console.log("        Note : files listed after //polyfillsToInclude: and // polyfillModuels comments in the testfile");
  console.log("               will be automatically be loaded");
  
  console.log("    -n, --nopolyfills : polyfill loading is disabled");
  console.log("        Used to detect which tests are in effect supported by the underlying platform natively")
}

/** converts relative path to a polyfill to a relative path in the project */
function pathForPolyfill(path:string):string {
  if (path == null) return path;
  if (path[0] !== "." && path[0] !== "/") {
    return path.indexOf("node_modules") === -1 ?  "./node_modules/"+path : path;
  } else {
    return path;
  }
}

/** search upward for a specific file */
function resolveUpward(from:string, filePath:string):string {
  if (filePath == null || path.isAbsolute(filePath)) return filePath;
  var absPath;
  while ((absPath = path.resolve(from, filePath))) {
    if (fs.existsSync(absPath)) return absPath;
    from = path.dirname(from);
    if (from === "/") return undefined;
  }
  return absPath;
}

/** returns a function which reduces a collection of strings to an array
 * of filepath to polyfills
 * prefix is usually **polyfillModules** or **polyfillsToInclude**
 */
function makePolyfillReducer(prefix:string) {
  var reg = new RegExp("//\\s*"+prefix+"\\s*:(.+)");
  return function fetchPolyfills(polyfills:string[], line, currentIndex, array):string[] {
    var list = reg.exec(line);
    if (list) return polyfills.concat(list[1].split(",").filter(Boolean));
    else return polyfills;
  }
}

//var babel_polyfill = require('babel-polyfill');
v(process.argv);

// not using Yargs, because polyfills must be required first
(function () {
  var lastOption = undefined;
  process.argv.slice(2).forEach( function (arg:string) {
    if (arg.substr(0,1) === "-") {
      var opt = arg.substr(0,2) === "--" ? arg.substr(2) : arg.substr(1,1) ;
      switch (opt) {
        case "v":
        case "verbose":
          argv.verbose = true;
          v("Switching to verbose mode");
          break;
        case "d":
        case "display":
          argv.display = true;
          v("Switching to verbose mode");
          break;
        case "s":
        case "summary":
          argv.summary = true;
          break;
        case "n":
        case "nopolyfills":
          argv.nopolyfills = true;
          v("!! Polyfill inclusion disabled !!");
          break;
        default:
          break;
      }
      lastOption = opt;
    } else {
      switch (lastOption) {
        case "p":
        case "polyfill":
          argv.polyfills.push(arg);
          break;
        default:
          // all unknown options are considered as flags
          argv._.push(arg);
      }
      
      lastOption = undefined;
    }
  })
})();

v("Arguments ",argv._);

if (argv._.length === 0) { showHelp(); fail(1,"Missing <testfile> argument"); }
if (argv._.length > 1) { showHelp(); fail(1,"Extra <testfile> argument"); }

var testFile = path.resolve(argv._[0]);

if (!fs.existsSync(testFile)) { showHelp(); fail(2, "'", testFile, "' does not exist"); }

/** STEP : polyfill inclusions */
if (!argv.nopolyfills) {
  /** look for references to polyfills to run the test
  * We are lloking for comments
  *   // polyfillModules :
  *   // polyfillsToInclude :
  * Each can appear multiple times, eventually with commas separated values
  * */
  var lines = fs.readFileSync(testFile, 'utf-8').split("\n");
  var polyfillsModules = lines.reduce( makePolyfillReducer("polyfillModules"), []);
  var polyfillToInclude = lines.reduce( makePolyfillReducer("polyfillsToInclude"), []);
  // now require the polyfills modules
  var allPolyfills = polyfillsModules.concat(argv.polyfills);
  v("PolyfillModules ", allPolyfills.join(","));
  try {
    for (var i = 0; i < allPolyfills.length; ++i) {
      var p = allPolyfills[i];
      v("require('"+p+"')");
      require(p);
    }
  } catch (e) {
    v(e.stack);
    fail(-1, "An error occured while loading polyfill modules ", e.msg);
  }
  
  // now include the polyfills 
  v("polyfillToInclude ", polyfillToInclude.join(","));
  try {
    for (var i = 0; i < polyfillToInclude.length; ++i) {
      var incPath = resolveUpward(path.resolve("."), pathForPolyfill(allPolyfills[i]));
      if (incPath) {
        //v("<< Will eval polyfill ", incPath);
        eval(fs.readFileSync(incPath, 'utf-8'));
        //v(">> Eval done ");
      }
    }
  } catch (e) {
    v(e.stack);
    fail(-1, "An error occured while including polyfill file ", e.msg);
  }
} else {
  v("!! polyfills inclusion disabled !!");
}

/** STEP : running the test script itself */

v("require(",testFile,")")
import r = require("./runner");

r.runAllFromFileAsync(testFile, function (err, report:r.TestReport) {
  if (err) fail(-1, err);
  report.options = argv;
  if (argv.display) {
    var d = require("./report");
    d.displayReport({indent:true, errors:false, summary:argv.summary}, report);
  } else {
    //console.log("process.send :", process.send)
    if (process.send) {
      process.send(report);
    } else { // process running standalone. Simply output the report
    console.log(JSON.stringify(report,null,2));
      
    }
  }
})